{"version":3,"sources":["hybridStoreLocator.js","marker-cluster.js"],"names":["HybridStoreLocator","options","that","this","current_list","current_page","state_selected","mapId","listId","paginationId","selectorId","styledMap","featureType","elementType","stylers","saturation","color","lightness","visibility","weight","zoom","centerLat","centerLng","storesUrl","paginationItemsPerPage","paginationLength","stores","constructor","mergeOptions","log","msg","console","obj1","obj2","obj3","attrname","markers","init","mapOptions","center","google","maps","LatLng","mapTypeId","MapTypeId","ROADMAP","mapTypeControlOptions","mapTypeIds","styledMapType","StyledMapType","name","map","Map","document","getElementById","mapTypes","set","setMapTypeId","geoLocate","$","on","updatePage","click","siblings","removeClass","addClass","selectState","data","tryAPIGeolocation","cb","jQuery","post","coords","latitude","location","lat","longitude","lng","fail","err","navigator","geolocation","getCurrentPosition","geoSort","error","code","TIMEOUT","PERMISSION_DENIED","message","indexOf","POSITION_UNAVAILABLE","position","get","store","i","distance_p2","Math","sqrt","pow","sort","a","b","listStores","setupMarkers","marker","Marker","infowindow","InfoWindow","content","address","event","addListener","open","cluster_options","imagePath","styles","push","url","height","width","iconAnchor","anchor","textSize","textColor","markerCluster","MarkerClusterer","renderStores","dom_address_list","html","each","slice","append","phone","renderPagination","floor","length","start","end","dom_pagination_block","active_class","s","max","e","min","state","filter","parseInt","opt_markers","opt_options","extend","OverlayView","map_","markers_","clusters_","sizes","styles_","ready_","gridSize_","minClusterSize_","maxZoom_","imagePath_","MARKER_CLUSTER_IMAGE_PATH_","imageExtension_","MARKER_CLUSTER_IMAGE_EXTENSION_","zoomOnClick_","undefined","averageCenter_","setupStyles_","setMap","prevZoom_","getZoom","resetViewport","redraw","addMarkers","Cluster","markerClusterer","markerClusterer_","getMap","getGridSize","getMinClusterSize","isAverageCenter","center_","bounds_","clusterIcon_","ClusterIcon","getStyles","cluster","opt_padding","getMarkerClusterer","padding_","cluster_","div_","sums_","visible_","prototype","object","property","apply","onAdd","setReady_","draw","size","fitMapToMarkers","getMarkers","bounds","LatLngBounds","getPosition","fitBounds","setStyles","isZoomOnClick","getTotalMarkers","setMaxZoom","maxZoom","getMaxZoom","calculator_","numStyles","index","count","dv","text","setCalculator","calculator","getCalculator","opt_nodraw","pushMarkerTo_","isAdded","repaint","addMarker","removeMarker_","m","splice","removeMarker","removed","removeMarkers","r","ready","createClusters_","getTotalClusters","setGridSize","setMinClusterSize","getExtendedBounds","projection","getProjection","tr","getNorthEast","bl","getSouthWest","trPix","fromLatLngToDivPixel","x","y","blPix","ne","fromDivPixelToLatLng","sw","isMarkerInBounds_","contains","clearMarkers","opt_hide","remove","oldClusters","window","setTimeout","distanceBetweenPoints_","p1","p2","R","dLat","PI","dLon","sin","cos","c","atan2","d","addToClosestCluster_","distance","clusterToAddTo","getCenter","isMarkerInClusterBounds","mapBounds","getBounds","isMarkerAlreadyAdded","l","calculateBounds_","len","updateIcon","getSize","mz","hide","sums","setCenter","setSums","show","triggerClusterClick","trigger","createElement","pos","getPosFromLatLng_","style","cssText","createCss","innerHTML","panes","getPanes","overlayMouseTarget","appendChild","isDragging","addDomListener","latlng","iconAnchor_","width_","height_","top","left","display","onRemove","parentNode","removeChild","text_","index_","useStyle","url_","textColor_","anchor_","textSize_","backgroundPosition_","backgroundPosition","txtColor","txtSize","join"],"mappings":"AAmBA,QAAAA,oBAAAC,GACA,GAAAC,GAAAC,IACAA,MAAAC,gBACAD,KAAAE,aAAA,EACAF,KAAAG,gBAAA,EACAH,KAAAF,SACAM,MAAA,kBACAC,OAAA,mBACAC,aAAA,yBACAC,WAAA,qBACAC,YAAAC,YAAA,MAAAC,YAAA,mBAAAC,UAAAC,WAAA,KAAAC,MAAA,YAAAC,UAAA,OAAAL,YAAA,MAAAC,YAAA,qBAAAC,UAAAI,WAAA,OAAAF,MAAA,YAAAC,UAAA,OAAAL,YAAA,MAAAC,YAAA,cAAAC,UAAAI,WAAA,UAAAN,YAAA,iBAAAC,YAAA,gBAAAC,UAAAG,UAAA,OAAAL,YAAA,iBAAAC,YAAA,kBAAAC,UAAAG,UAAA,KAAAE,OAAA,MAAAH,MAAA,cAAAJ,YAAA,YAAAC,YAAA,WAAAC,UAAAE,MAAA,YAAAC,UAAA,OAAAL,YAAA,qBAAAC,YAAA,gBAAAC,UAAAE,MAAA,cAAAJ,YAAA,8BAAAC,YAAA,gBAAAC,UAAAE,MAAA,cAAAJ,YAAA,4BAAAC,YAAA,gBAAAC,UAAAE,MAAA,cAAAJ,YAAA,MAAAC,YAAA,WAAAC,UAAAE,MAAA,YAAAC,UAAA,OAAAL,YAAA,eAAAC,YAAA,gBAAAC,UAAAE,MAAA,YAAAC,UAAA,SAAAL,YAAA,iBAAAC,YAAA,gBAAAC,UAAAE,MAAA,YAAAC,UAAA,SAAAL,YAAA,WAAAC,YAAA,WAAAC,UAAAE,MAAA,YAAAC,UAAA,OAAAL,YAAA,WAAAC,YAAA,gBAAAC,UAAAE,MAAA,cAAAJ,YAAA,eAAAC,YAAA,gBAAAC,UAAAE,MAAA,YAAAC,UAAA,OAAAL,YAAA,eAAAC,YAAA,kBAAAC,UAAAE,MAAA,YAAAC,UAAA,KAAAE,OAAA,OAAAP,YAAA,gBAAAC,YAAA,WAAAC,UAAAE,MAAA,YAAAC,UAAA,OAAAL,YAAA,aAAAC,YAAA,WAAAC,UAAAE,MAAA,YAAAC,UAAA,OAAAL,YAAA,UAAAC,YAAA,WAAAC,UAAAE,MAAA,YAAAC,UAAA,OAAAL,YAAA,QAAAC,YAAA,WAAAC,UAAAE,MAAA,YAAAC,UAAA,OAAAL,YAAA,QAAAC,YAAA,gBAAAC,UAAAE,MAAA,cACAI,KAAA,EACAC,WAAA,UACAC,WAAA,WACAC,UAAA,mBACAC,uBAAA,EACAC,iBAAA,EACAC,QAAA,GAGAvB,KAAAwB,YAAA,SAAA1B,GACAA,IACAC,EAAAD,QAAAC,EAAA0B,aAAA1B,EAAAD,QAAAA,KAIAE,KAAA0B,IAAA,SAAAC,GACAC,SAAAA,QAAAF,IAAAC,IAGA3B,KAAAyB,aAAA,SAAAI,EAAAC,GACA,GAAAC,KACA,KAAA,GAAAC,KAAAH,GAAAE,EAAAC,GAAAH,EAAAG,EACA,KAAA,GAAAA,KAAAF,GAAAC,EAAAC,GAAAF,EAAAE,EACA,OAAAD,IAGA/B,KAAAuB,UACAvB,KAAAiC,WAEAjC,KAAAwB,YAAA1B,GAEAE,KAAAkC,KAAA,WACA,GAAAC,IACAlB,KAAAjB,KAAAF,QAAAmB,KACAmB,OAAA,GAAAC,QAAAC,KAAAC,OAAAvC,KAAAF,QAAAoB,UAAAlB,KAAAF,QAAAqB,WACAqB,UAAAH,OAAAC,KAAAG,UAAAC,QACAC,uBACAC,YAAA,YAAA,SAAA,gBAIAC,EAAA,GAAAR,QAAAC,KAAAQ,cAAA9C,KAAAF,QAAAU,WAAAuC,KAAA,OAEAhD,GAAAiD,IAAA,GAAAX,QAAAC,KAAAW,IAAAC,SAAAC,eAAAnD,KAAAF,QAAAM,OAAA+B,GACApC,EAAAiD,IAAAI,SAAAC,IAAA,aAAAR,GACA9C,EAAAiD,IAAAM,aAAA,cACAtD,KAAAuD,YAEAC,EAAA,IAAAzD,EAAAD,QAAAQ,cAAAmD,GAAA,QAAA,6BAAA1D,EAAA2D,YACAF,EAAA,IAAAzD,EAAAD,QAAAS,WAAA,WAAAoD,MAAA,WACAH,EAAAxD,MAAA4D,WAAAC,YAAA,kBACAL,EAAAxD,MAAA8D,SAAA,kBACA/D,EAAAgE,YAAAP,EAAAxD,MAAAgE,KAAA,aAIAhE,KAAAuD,UAAA,WACA,GAAAU,GAAA,SAAAC,GACAC,OAAAC,KAAA,kGAAA,SAAAJ,GACAE,GAAAG,QAAAC,SAAAN,EAAAO,SAAAC,IAAAC,UAAAT,EAAAO,SAAAG,SACAC,KAAA,SAAAC,GACAhD,QAAAF,IAAA,yBAAAkD,KAIAC,WAAAC,aACAD,UAAAC,YAAAC,mBAAA/E,KAAAgF,QAAA,SAAAC,GACA,OAAAA,EAAAC,MACA,IAAAD,GAAAE,QACApF,EAAA2B,IAAA,sCACA,MACA,KAAAuD,GAAAG,kBACA,GAAAH,EAAAI,QAAAC,QAAA,oCACArB,EAAAlE,EAAAiF,QAEA,MACA,KAAAC,GAAAM,qBACAxF,EAAA2B,IAAA,wDAOA1B,KAAAgF,QAAA,SAAAQ,GACA,GAAAhB,GAAAgB,EAAAnB,OAAAC,SACAI,EAAAc,EAAAnB,OAAAI,SAEAN,QAAAsB,IAAA1F,EAAAD,QAAAsB,UAAA,SAAAG,GACAxB,EAAAwB,OAAAA,EAAAyB,IAAA,SAAA0C,EAAAC,GAEA,MADAD,GAAAE,YAAAC,KAAAC,KAAAD,KAAAE,IAAAvB,EAAAkB,EAAAlB,IAAA,GAAAqB,KAAAE,IAAArB,EAAAgB,EAAAhB,IAAA,IACAgB,IAEA3F,EAAAwB,OAAAyE,KAAA,SAAAC,EAAAC,GAAA,MAAAD,GAAA,YAAAC,EAAA,cACA/B,OAAA,6BAAAN,YAAA,kBACA9D,EAAAoG,aACApG,EAAAqG,kBAIApG,KAAAoG,aAAA,WACArG,EAAAkC,QAAAlC,EAAAwB,OAAAyB,IAAA,SAAAuB,EAAAoB,GACA,GAAAU,GAAA,GAAAhE,QAAAC,KAAAgE,QACAd,UAAAhB,IAAAD,EAAAC,IAAAE,IAAAH,EAAAG,OAGA6B,EAAA,GAAAlE,QAAAC,KAAAkE,YACAC,QAAA,+BAAAlC,EAAAxB,KAAA,yEACAwB,EAAAC,IAAA,IAAAD,EAAAG,IAAA,KAAAH,EAAAmC,QAAA,iBAOA,OAJArE,QAAAC,KAAAqE,MAAAC,YAAAP,EAAA,QAAA,WACAE,EAAAM,KAAA9G,EAAAiD,IAAAqD,KAGAA,GAIA,KAAA,GADAS,IAAAC,UAAA,gBAAAC,WACArB,EAAA,EAAAA,EAAA,EAAAA,IAAAmB,EAAAE,OAAAC,MACAC,IAAA,iBAAAvB,EAAA,GAAA,OACAwB,OAAA,GACAC,MAAA,GACAC,YAAA,KAAA,IACAC,QAAA,GAAA,GACAC,SAAA,KACAC,UAAA,WAGAzH,GAAAD,QAAAgH,gBACA/G,EAAAD,QAAAgH,gBAAA/G,EAAA0B,aAAAqF,EAAA/G,EAAAD,QAAAgH,iBAEA/G,EAAAD,QAAAgH,gBAAAA,EAGA/G,EAAA0H,cAAA,GAAAC,iBAAA3H,EAAAiD,IAAAjD,EAAAkC,QAAAlC,EAAAD,QAAAgH,kBAGA9G,KAAAmG,WAAA,SAAA5E,GACAA,EACAxB,EAAAE,aAAAsB,EAEAxB,EAAAE,aAAAF,EAAAwB,OAGAxB,EAAAG,aAAA,EAEAH,EAAA4H,gBAGA3H,KAAA2H,aAAA,WACA,GAAAC,GAAApE,EAAA,IAAAzD,EAAAD,QAAAO,OACAuH,GAAAC,KAAA,IACArE,EAAAsE,KAAA/H,EAAAE,aAAA8H,MAAAhI,EAAAG,aAAAH,EAAAD,QAAAuB,wBAAAtB,EAAAG,aAAA,GAAAH,EAAAD,QAAAuB,wBAAA,WACAuG,EAAAI,OAAA,2CAAAhI,KAAA+C,KAAA,mBAAA/C,KAAA0G,QAAA,iCAAA1G,KAAAiI,MAAA,KAAAjI,KAAAiI,MAAA,qDAAAjI,KAAAwE,IAAA,IAAAxE,KAAA0E,IAAA,gFAEA3E,EAAAmI,iBAAA,EAAArC,KAAAsC,MAAApI,EAAAE,aAAAmI,OAAArI,EAAAD,QAAAuB,wBAAAtB,EAAAG,eAGAF,KAAAkI,iBAAA,SAAAG,EAAAC,EAAApI,GACA,GAAAqI,GAAA/E,EAAA,IAAAzD,EAAAD,QAAAQ,aACAkD,GAAA+E,GAAAV,KAAA,GACA,IAAAW,GAAA,GACAC,EAAA5C,KAAA6C,IAAAL,EAAAtI,EAAAG,aAAAH,EAAAD,QAAAwB,kBACAqH,EAAA9C,KAAA+C,IAAAN,EAAAvI,EAAAG,aAAAH,EAAAD,QAAAwB,iBACAgH,GAAA,EAAAvI,EAAAD,QAAAwB,mBACAqH,EAAAL,EAAA,EAAAvI,EAAAD,QAAAwB,iBACAqH,GAAA,EAAA5I,EAAAD,QAAAwB,iBAAA,EAAAqH,EAAAF,EAEAA,GAAA,EAAA1I,EAAAD,QAAAwB,iBAAA,EAAAqH,EAAAF,GAGA1I,EAAAG,aAAA,EAAAH,EAAAD,QAAAwB,kBACAiH,EAAAP,OAAA,oDAAAK,EAAA,mBACAtI,EAAAG,aAAA,GACAqI,EAAAP,OAAA,gEAAAjI,EAAAG,aAAA,GAAA,kBACA,KAAA,GAAAyF,GAAA8C,EAAA9C,EAAAgD,EAAAhD,IACA6C,EAAA,GACA7C,GAAA5F,EAAAG,eAAAsI,EAAA,UACAD,EAAAP,OAAA,wCAAAQ,EAAA,gBAAA7C,EAAA,MAAAA,EAAA,GAAA,QAEA5F,GAAAG,aAAAoI,EAAA,GACAC,EAAAP,OAAA,gEAAAjI,EAAAG,aAAA,GAAA,mBACAH,EAAAG,aAAAoI,EAAA,EAAAvI,EAAAD,QAAAwB,iBAAA,GACAiH,EAAAP,OAAA,qDAAAM,EAAA,GAAA,oBAGAtI,KAAA+D,YAAA,SAAA8E,GACA9I,EAAAI,gBAAA,EACAJ,EAAAoG,WAAApG,EAAAwB,OAAAuH,OAAA,SAAApD,GACA,MAAAA,GAAAmD,OAAAA,MAIA7I,KAAA0D,WAAA,WACA3D,EAAAG,aAAA6I,SAAAvF,EAAAxD,MAAAgE,KAAA,SACAjE,EAAA4H,gBCjKA,QAAAD,iBAAA1E,EAAAgG,EAAAC,GAMAjJ,KAAAkJ,OAAAxB,gBAAArF,OAAAC,KAAA6G,aACAnJ,KAAAoJ,KAAApG,EAMAhD,KAAAqJ,YAKArJ,KAAAsJ,aAEAtJ,KAAAuJ,OAAA,GAAA,GAAA,GAAA,GAAA,IAKAvJ,KAAAwJ,WAMAxJ,KAAAyJ,QAAA,CAEA,IAAA3J,GAAAmJ,KAMAjJ,MAAA0J,UAAA5J,EAAA,UAAA,GAKAE,KAAA2J,gBAAA7J,EAAA,oBAAA,EAOAE,KAAA4J,SAAA9J,EAAA,SAAA,KAEAE,KAAAwJ,QAAA1J,EAAA,WAMAE,KAAA6J,WAAA/J,EAAA,WACAE,KAAA8J,2BAMA9J,KAAA+J,gBAAAjK,EAAA,gBACAE,KAAAgK,gCAMAhK,KAAAiK,cAAA,EAEAC,QAAApK,EAAA,cACAE,KAAAiK,aAAAnK,EAAA,aAOAE,KAAAmK,gBAAA,EAEAD,QAAApK,EAAA,gBACAE,KAAAmK,eAAArK,EAAA,eAGAE,KAAAoK,eAEApK,KAAAqK,OAAArH,GAMAhD,KAAAsK,UAAAtK,KAAAoJ,KAAAmB,SAGA,IAAAxK,GAAAC,IACAqC,QAAAC,KAAAqE,MAAAC,YAAA5G,KAAAoJ,KAAA,eAAA,WACA,GAAAnI,GAAAlB,EAAAqJ,KAAAmB,SAEAxK,GAAAuK,WAAArJ,IACAlB,EAAAuK,UAAArJ,EACAlB,EAAAyK,mBAIAnI,OAAAC,KAAAqE,MAAAC,YAAA5G,KAAAoJ,KAAA,OAAA,WACArJ,EAAA0K,WAIAzB,GAAAA,EAAAZ,QACApI,KAAA0K,WAAA1B,GAAA,GA6mBA,QAAA2B,SAAAC,GACA5K,KAAA6K,iBAAAD,EACA5K,KAAAoJ,KAAAwB,EAAAE,SACA9K,KAAA0J,UAAAkB,EAAAG,cACA/K,KAAA2J,gBAAAiB,EAAAI,oBACAhL,KAAAmK,eAAAS,EAAAK,kBACAjL,KAAAkL,QAAA,KACAlL,KAAAqJ,YACArJ,KAAAmL,QAAA,KACAnL,KAAAoL,aAAA,GAAAC,aAAArL,KAAA4K,EAAAU,YACAV,EAAAG,eAuNA,QAAAM,aAAAE,EAAAvE,EAAAwE,GACAD,EAAAE,qBAAAvC,OAAAmC,YAAAhJ,OAAAC,KAAA6G,aAEAnJ,KAAAwJ,QAAAxC,EACAhH,KAAA0L,SAAAF,GAAA,EACAxL,KAAA2L,SAAAJ,EACAvL,KAAAkL,QAAA,KACAlL,KAAAoJ,KAAAmC,EAAAT,SACA9K,KAAA4L,KAAA,KACA5L,KAAA6L,MAAA,KACA7L,KAAA8L,UAAA,EAEA9L,KAAAqK,OAAArK,KAAAoJ,MA/0BA1B,gBAAAqE,UAAAjC,2BAAA,cASApC,gBAAAqE,UAAA/B,gCAAA,MAWAtC,gBAAAqE,UAAA7C,OAAA,SAAArH,EAAAC,GACA,MAAA,UAAAkK,GACA,IAAA,GAAAC,KAAAD,GAAAD,UACA/L,KAAA+L,UAAAE,GAAAD,EAAAD,UAAAE,EAEA,OAAAjM,OACAkM,MAAArK,GAAAC,KAQA4F,gBAAAqE,UAAAI,MAAA,WACAnM,KAAAoM,WAAA,IAOA1E,gBAAAqE,UAAAM,KAAA,aAOA3E,gBAAAqE,UAAA3B,aAAA,WACA,IAAApK,KAAAwJ,QAAApB,OAIA,IAAA,GAAAkE,GAAA3G,EAAA,EAAA2G,EAAAtM,KAAAuJ,MAAA5D,GAAAA,IACA3F,KAAAwJ,QAAAvC,MACAC,IAAAlH,KAAA6J,YAAAlE,EAAA,GAAA,IAAA3F,KAAA+J,gBACA5C,OAAAmF,EACAlF,MAAAkF,KAQA5E,gBAAAqE,UAAAQ,gBAAA,WAGA,IAAA,GAAAlG,GAFApE,EAAAjC,KAAAwM,aACAC,EAAA,GAAApK,QAAAC,KAAAoK,aACA/G,EAAA,EAAAU,EAAApE,EAAA0D,GAAAA,IACA8G,EAAAvD,OAAA7C,EAAAsG,cAGA3M,MAAAoJ,KAAAwD,UAAAH,IASA/E,gBAAAqE,UAAAc,UAAA,SAAA7F,GACAhH,KAAAwJ,QAAAxC,GASAU,gBAAAqE,UAAAT,UAAA,WACA,MAAAtL,MAAAwJ,SASA9B,gBAAAqE,UAAAe,cAAA,WACA,MAAA9M,MAAAiK,cAQAvC,gBAAAqE,UAAAd,gBAAA,WACA,MAAAjL,MAAAmK,gBASAzC,gBAAAqE,UAAAS,WAAA,WACA,MAAAxM,MAAAqJ,UASA3B,gBAAAqE,UAAAgB,gBAAA,WACA,MAAA/M,MAAAqJ,SAAAjB,QASAV,gBAAAqE,UAAAiB,WAAA,SAAAC,GACAjN,KAAA4J,SAAAqD,GASAvF,gBAAAqE,UAAAmB,WAAA,WACA,MAAAlN,MAAA4J,UAYAlC,gBAAAqE,UAAAoB,YAAA,SAAAlL,EAAAmL,GAIA,IAHA,GAAAC,GAAA,EACAC,EAAArL,EAAAmG,OACAmF,EAAAD,EACA,IAAAC,GACAA,EAAAxE,SAAAwE,EAAA,GAAA,IACAF,GAIA,OADAA,GAAAxH,KAAA+C,IAAAyE,EAAAD,IAEAI,KAAAF,EACAD,MAAAA,IAaA3F,gBAAAqE,UAAA0B,cAAA,SAAAC,GACA1N,KAAAmN,YAAAO,GASAhG,gBAAAqE,UAAA4B,cAAA,WACA,MAAA3N,MAAAmN,aAUAzF,gBAAAqE,UAAArB,WAAA,SAAAzI,EAAA2L,GACA,IAAA,GAAAvH,GAAAV,EAAA,EAAAU,EAAApE,EAAA0D,GAAAA,IACA3F,KAAA6N,cAAAxH,EAEAuH,IACA5N,KAAAyK,UAWA/C,gBAAAqE,UAAA8B,cAAA,SAAAxH,GAEA,GADAA,EAAAyH,SAAA,EACAzH,EAAA,UAAA,CAGA,GAAAtG,GAAAC,IACAqC,QAAAC,KAAAqE,MAAAC,YAAAP,EAAA,UAAA,WACAA,EAAAyH,SAAA,EACA/N,EAAAgO,YAGA/N,KAAAqJ,SAAApC,KAAAZ,IAUAqB,gBAAAqE,UAAAiC,UAAA,SAAA3H,EAAAuH,GACA5N,KAAA6N,cAAAxH,GACAuH,GACA5N,KAAAyK,UAYA/C,gBAAAqE,UAAAkC,cAAA,SAAA5H,GACA,GAAAgH,IAAA,CACA,IAAArN,KAAAqJ,SAAA/D,QACA+H,EAAArN,KAAAqJ,SAAA/D,QAAAe,OAEA,KAAA,GAAA6H,GAAAvI,EAAA,EAAAuI,EAAAlO,KAAAqJ,SAAA1D,GAAAA,IACA,GAAAuI,GAAA7H,EAAA,CACAgH,EAAA1H,CACA,OAKA,MAAA0H,KAAA,IAKAhH,EAAAgE,OAAA,MAEArK,KAAAqJ,SAAA8E,OAAAd,EAAA,IAEA,IAWA3F,gBAAAqE,UAAAqC,aAAA,SAAA/H,EAAAuH,GACA,GAAAS,GAAArO,KAAAiO,cAAA5H,EAEA,SAAAuH,IAAAS,KACArO,KAAAwK,gBACAxK,KAAAyK,UACA,IAaA/C,gBAAAqE,UAAAuC,cAAA,SAAArM,EAAA2L,GAGA,IAAA,GAAAvH,GAFAgI,GAAA,EAEA1I,EAAA,EAAAU,EAAApE,EAAA0D,GAAAA,IAAA,CACA,GAAA4I,GAAAvO,KAAAiO,cAAA5H,EACAgI,GAAAA,GAAAE,EAGA,IAAAX,GAAAS,EAGA,MAFArO,MAAAwK,gBACAxK,KAAAyK,UACA,GAWA/C,gBAAAqE,UAAAK,UAAA,SAAAoC,GACAxO,KAAAyJ,SACAzJ,KAAAyJ,OAAA+E,EACAxO,KAAAyO,oBAUA/G,gBAAAqE,UAAA2C,iBAAA,WACA,MAAA1O,MAAAsJ,UAAAlB,QASAV,gBAAAqE,UAAAjB,OAAA,WACA,MAAA9K,MAAAoJ,MASA1B,gBAAAqE,UAAA1B,OAAA,SAAArH,GACAhD,KAAAoJ,KAAApG,GASA0E,gBAAAqE,UAAAhB,YAAA,WACA,MAAA/K,MAAA0J,WASAhC,gBAAAqE,UAAA4C,YAAA,SAAArC,GACAtM,KAAA0J,UAAA4C,GASA5E,gBAAAqE,UAAAf,kBAAA,WACA,MAAAhL,MAAA2J,iBAQAjC,gBAAAqE,UAAA6C,kBAAA,SAAAtC,GACAtM,KAAA2J,gBAAA2C,GAUA5E,gBAAAqE,UAAA8C,kBAAA,SAAApC,GACA,GAAAqC,GAAA9O,KAAA+O,gBAGAC,EAAA,GAAA3M,QAAAC,KAAAC,OAAAkK,EAAAwC,eAAAzK,MACAiI,EAAAwC,eAAAvK,OACAwK,EAAA,GAAA7M,QAAAC,KAAAC,OAAAkK,EAAA0C,eAAA3K,MACAiI,EAAA0C,eAAAzK,OAGA0K,EAAAN,EAAAO,qBAAAL,EACAI,GAAAE,GAAAtP,KAAA0J,UACA0F,EAAAG,GAAAvP,KAAA0J,SAEA,IAAA8F,GAAAV,EAAAO,qBAAAH,EACAM,GAAAF,GAAAtP,KAAA0J,UACA8F,EAAAD,GAAAvP,KAAA0J,SAGA,IAAA+F,GAAAX,EAAAY,qBAAAN,GACAO,EAAAb,EAAAY,qBAAAF,EAMA,OAHA/C,GAAAvD,OAAAuG,GACAhD,EAAAvD,OAAAyG,GAEAlD,GAYA/E,gBAAAqE,UAAA6D,kBAAA,SAAAvJ,EAAAoG,GACA,MAAAA,GAAAoD,SAAAxJ,EAAAsG,gBAOAjF,gBAAAqE,UAAA+D,aAAA,WACA9P,KAAAwK,eAAA,GAGAxK,KAAAqJ,aAQA3B,gBAAAqE,UAAAvB,cAAA,SAAAuF,GAEA,IAAA,GAAAxE,GAAA5F,EAAA,EAAA4F,EAAAvL,KAAAsJ,UAAA3D,GAAAA,IACA4F,EAAAyE,QAIA,KAAA,GAAA3J,GAAAV,EAAA,EAAAU,EAAArG,KAAAqJ,SAAA1D,GAAAA,IACAU,EAAAyH,SAAA,EACAiC,GACA1J,EAAAgE,OAAA,KAIArK,MAAAsJ,cAMA5B,gBAAAqE,UAAAgC,QAAA,WACA,GAAAkC,GAAAjQ,KAAAsJ,UAAAvB,OACA/H,MAAAsJ,UAAAlB,OAAA,EACApI,KAAAwK,gBACAxK,KAAAyK,SAIAyF,OAAAC,WAAA,WACA,IAAA,GAAA5E,GAAA5F,EAAA,EAAA4F,EAAA0E,EAAAtK,GAAAA,IACA4F,EAAAyE,UAEA,IAOAtI,gBAAAqE,UAAAtB,OAAA,WACAzK,KAAAyO,mBAaA/G,gBAAAqE,UAAAqE,uBAAA,SAAAC,EAAAC,GACA,IAAAD,IAAAC,EACA,MAAA,EAGA,IAAAC,GAAA,KACAC,GAAAF,EAAA9L,MAAA6L,EAAA7L,OAAAqB,KAAA4K,GAAA,IACAC,GAAAJ,EAAA5L,MAAA2L,EAAA3L,OAAAmB,KAAA4K,GAAA,IACAxK,EAAAJ,KAAA8K,IAAAH,EAAA,GAAA3K,KAAA8K,IAAAH,EAAA,GACA3K,KAAA+K,IAAAP,EAAA7L,MAAAqB,KAAA4K,GAAA,KAAA5K,KAAA+K,IAAAN,EAAA9L,MAAAqB,KAAA4K,GAAA,KACA5K,KAAA8K,IAAAD,EAAA,GAAA7K,KAAA8K,IAAAD,EAAA,GACAG,EAAA,EAAAhL,KAAAiL,MAAAjL,KAAAC,KAAAG,GAAAJ,KAAAC,KAAA,EAAAG,IACA8K,EAAAR,EAAAM,CACA,OAAAE,IAUArJ,gBAAAqE,UAAAiF,qBAAA,SAAA3K,GAIA,IAAA,GAAAkF,GAHA0F,EAAA,IACAC,EAAA,KAEAvL,GADAU,EAAAsG,cACA,GAAApB,EAAAvL,KAAAsJ,UAAA3D,GAAAA,IAAA,CACA,GAAAvD,GAAAmJ,EAAA4F,WACA,IAAA/O,EAAA,CACA,GAAA2O,GAAA/Q,KAAAoQ,uBAAAhO,EAAAiE,EAAAsG,cACAoE,GAAAE,IACAA,EAAAF,EACAG,EAAA3F,IAKA,GAAA2F,GAAAA,EAAAE,wBAAA/K,GACA6K,EAAAlD,UAAA3H,OACA,CACA,GAAAkF,GAAA,GAAAZ,SAAA3K,KACAuL,GAAAyC,UAAA3H,GACArG,KAAAsJ,UAAArC,KAAAsE,KAUA7D,gBAAAqE,UAAA0C,gBAAA,WACA,GAAAzO,KAAAyJ,OAUA,IAAA,GAAApD,GAJAgL,EAAA,GAAAhP,QAAAC,KAAAoK,aAAA1M,KAAAoJ,KAAAkI,YAAAnC,eACAnP,KAAAoJ,KAAAkI,YAAArC,gBACAxC,EAAAzM,KAAA6O,kBAAAwC,GAEA1L,EAAA,EAAAU,EAAArG,KAAAqJ,SAAA1D,GAAAA,KACAU,EAAAyH,SAAA9N,KAAA4P,kBAAAvJ,EAAAoG,IACAzM,KAAAgR,qBAAA3K,IAiCAsE,QAAAoB,UAAAwF,qBAAA,SAAAlL,GACA,GAAArG,KAAAqJ,SAAA/D,QACA,MAAAtF,MAAAqJ,SAAA/D,QAAAe,KAAA,CAEA,KAAA,GAAA6H,GAAAvI,EAAA,EAAAuI,EAAAlO,KAAAqJ,SAAA1D,GAAAA,IACA,GAAAuI,GAAA7H,EACA,OAAA,CAIA,QAAA,GAUAsE,QAAAoB,UAAAiC,UAAA,SAAA3H,GACA,GAAArG,KAAAuR,qBAAAlL,GACA,OAAA,CAGA,IAAArG,KAAAkL,SAIA,GAAAlL,KAAAmK,eAAA,CACA,GAAAqH,GAAAxR,KAAAqJ,SAAAjB,OAAA,EACA5D,GAAAxE,KAAAkL,QAAA1G,OAAAgN,EAAA,GAAAnL,EAAAsG,cAAAnI,OAAAgN,EACA9M,GAAA1E,KAAAkL,QAAAxG,OAAA8M,EAAA,GAAAnL,EAAAsG,cAAAjI,OAAA8M,CACAxR,MAAAkL,QAAA,GAAA7I,QAAAC,KAAAC,OAAAiC,EAAAE,GACA1E,KAAAyR,wBARAzR,MAAAkL,QAAA7E,EAAAsG,cACA3M,KAAAyR,kBAWApL,GAAAyH,SAAA,EACA9N,KAAAqJ,SAAApC,KAAAZ,EAEA,IAAAqL,GAAA1R,KAAAqJ,SAAAjB,MAMA,IALAsJ,EAAA1R,KAAA2J,iBAAAtD,EAAAyE,UAAA9K,KAAAoJ,MAEA/C,EAAAgE,OAAArK,KAAAoJ,MAGAsI,GAAA1R,KAAA2J,gBAEA,IAAA,GAAAhE,GAAA,EAAAA,EAAA+L,EAAA/L,IACA3F,KAAAqJ,SAAA1D,GAAA0E,OAAA,KASA,OALAqH,IAAA1R,KAAA2J,iBACAtD,EAAAgE,OAAA,MAGArK,KAAA2R,cACA,GASAhH,QAAAoB,UAAAN,mBAAA,WACA,MAAAzL,MAAA6K,kBASAF,QAAAoB,UAAAuF,UAAA,WAGA,IAAA,GAAAjL,GAFAoG,EAAA,GAAApK,QAAAC,KAAAoK,aAAA1M,KAAAkL,QAAAlL,KAAAkL,SACAjJ,EAAAjC,KAAAwM,aACA7G,EAAA,EAAAU,EAAApE,EAAA0D,GAAAA,IACA8G,EAAAvD,OAAA7C,EAAAsG,cAEA,OAAAF,IAOA9B,QAAAoB,UAAAiE,OAAA,WACAhQ,KAAAoL,aAAA4E,SACAhQ,KAAAqJ,SAAAjB,OAAA,QACApI,MAAAqJ,UASAsB,QAAAoB,UAAA6F,QAAA,WACA,MAAA5R,MAAAqJ,SAAAjB,QASAuC,QAAAoB,UAAAS,WAAA,WACA,MAAAxM,MAAAqJ,UASAsB,QAAAoB,UAAAoF,UAAA,WACA,MAAAnR,MAAAkL,SASAP,QAAAoB,UAAA0F,iBAAA,WACA,GAAAhF,GAAA,GAAApK,QAAAC,KAAAoK,aAAA1M,KAAAkL,QAAAlL,KAAAkL,QACAlL,MAAAmL,QAAAnL,KAAA6K,iBAAAgE,kBAAApC,IAUA9B,QAAAoB,UAAAqF,wBAAA,SAAA/K,GACA,MAAArG,MAAAmL,QAAA0E,SAAAxJ,EAAAsG,gBASAhC,QAAAoB,UAAAjB,OAAA,WACA,MAAA9K,MAAAoJ,MAOAuB,QAAAoB,UAAA4F,WAAA,WACA,GAAA1Q,GAAAjB,KAAAoJ,KAAAmB,UACAsH,EAAA7R,KAAA6K,iBAAAqC,YAEA,IAAA2E,GAAA5Q,EAAA4Q,EAEA,IAAA,GAAAxL,GAAAV,EAAA,EAAAU,EAAArG,KAAAqJ,SAAA1D,GAAAA,IACAU,EAAAgE,OAAArK,KAAAoJ,UAHA,CAQA,GAAApJ,KAAAqJ,SAAAjB,OAAApI,KAAA2J,gBAGA,WADA3J,MAAAoL,aAAA0G,MAIA,IAAA1E,GAAApN,KAAA6K,iBAAAS,YAAAlD,OACA2J,EAAA/R,KAAA6K,iBAAA8C,gBAAA3N,KAAAqJ,SAAA+D,EACApN,MAAAoL,aAAA4G,UAAAhS,KAAAkL,SACAlL,KAAAoL,aAAA6G,QAAAF,GACA/R,KAAAoL,aAAA8G,SA0CA7G,YAAAU,UAAAoG,oBAAA,SAAAxL,GACA,GAAAiE,GAAA5K,KAAA2L,SAAAF,oBAGApJ,QAAAC,KAAAqE,MAAAyL,QAAAxH,EAAA,eAAA5K,KAAA2L,SAAAhF,GAEAiE,EAAAkC,iBAEA9M,KAAAoJ,KAAAwD,UAAA5M,KAAA2L,SAAA2F,cASAjG,YAAAU,UAAAI,MAAA,WAEA,GADAnM,KAAA4L,KAAA1I,SAAAmP,cAAA,OACArS,KAAA8L,SAAA,CACA,GAAAwG,GAAAtS,KAAAuS,kBAAAvS,KAAAkL,QACAlL,MAAA4L,KAAA4G,MAAAC,QAAAzS,KAAA0S,UAAAJ,GACAtS,KAAA4L,KAAA+G,UAAA3S,KAAA6L,MAAA2B,KAGA,GAAAoF,GAAA5S,KAAA6S,UACAD,GAAAE,mBAAAC,YAAA/S,KAAA4L,KAEA,IAAA7L,GAAAC,KACAgT,GAAA,CACA3Q,QAAAC,KAAAqE,MAAAsM,eAAAjT,KAAA4L,KAAA,QAAA,SAAAjF,GAEAqM,GACAjT,EAAAoS,oBAAAxL,KAGAtE,OAAAC,KAAAqE,MAAAsM,eAAAjT,KAAA4L,KAAA,YAAA,WACAoH,GAAA,IAEA3Q,OAAAC,KAAAqE,MAAAsM,eAAAjT,KAAA4L,KAAA,YAAA,WACAoH,GAAA,KAYA3H,YAAAU,UAAAwG,kBAAA,SAAAW,GACA,GAAAZ,GAAAtS,KAAA+O,gBAAAM,qBAAA6D,EASA,OAPA,gBAAAlT,MAAAmT,aAAA,IAAAnT,KAAAmT,YAAA/K,QACAkK,EAAAhD,GAAAtP,KAAAmT,YAAA,GACAb,EAAA/C,GAAAvP,KAAAmT,YAAA,KAEAb,EAAAhD,GAAAvG,SAAA/I,KAAAoT,OAAA,EAAA,IACAd,EAAA/C,GAAAxG,SAAA/I,KAAAqT,QAAA,EAAA,KAEAf,GAQAjH,YAAAU,UAAAM,KAAA,WACA,GAAArM,KAAA8L,SAAA,CACA,GAAAwG,GAAAtS,KAAAuS,kBAAAvS,KAAAkL,QACAlL,MAAA4L,KAAA4G,MAAAc,IAAAhB,EAAA/C,EAAA,KACAvP,KAAA4L,KAAA4G,MAAAe,KAAAjB,EAAAhD,EAAA,OAQAjE,YAAAU,UAAA+F,KAAA,WACA9R,KAAA4L,OACA5L,KAAA4L,KAAA4G,MAAAgB,QAAA,QAEAxT,KAAA8L,UAAA,GAOAT,YAAAU,UAAAmG,KAAA,WACA,GAAAlS,KAAA4L,KAAA,CACA,GAAA0G,GAAAtS,KAAAuS,kBAAAvS,KAAAkL,QACAlL,MAAA4L,KAAA4G,MAAAC,QAAAzS,KAAA0S,UAAAJ,GACAtS,KAAA4L,KAAA4G,MAAAgB,QAAA,GAEAxT,KAAA8L,UAAA,GAOAT,YAAAU,UAAAiE,OAAA,WACAhQ,KAAAqK,OAAA,OAQAgB,YAAAU,UAAA0H,SAAA,WACAzT,KAAA4L,MAAA5L,KAAA4L,KAAA8H,aACA1T,KAAA8R,OACA9R,KAAA4L,KAAA8H,WAAAC,YAAA3T,KAAA4L,MACA5L,KAAA4L,KAAA,OAYAP,YAAAU,UAAAkG,QAAA,SAAAF,GACA/R,KAAA6L,MAAAkG,EACA/R,KAAA4T,MAAA7B,EAAAvE,KACAxN,KAAA6T,OAAA9B,EAAA1E,MACArN,KAAA4L,OACA5L,KAAA4L,KAAA+G,UAAAZ,EAAAvE,MAGAxN,KAAA8T,YAOAzI,YAAAU,UAAA+H,SAAA,WACA,GAAAzG,GAAAxH,KAAA6C,IAAA,EAAA1I,KAAA6L,MAAAwB,MAAA,EACAA,GAAAxH,KAAA+C,IAAA5I,KAAAwJ,QAAApB,OAAA,EAAAiF,EACA,IAAAmF,GAAAxS,KAAAwJ,QAAA6D,EACArN,MAAA+T,KAAAvB,EAAA,IACAxS,KAAAqT,QAAAb,EAAA,OACAxS,KAAAoT,OAAAZ,EAAA,MACAxS,KAAAgU,WAAAxB,EAAA,UACAxS,KAAAiU,QAAAzB,EAAA,OACAxS,KAAAkU,UAAA1B,EAAA,SACAxS,KAAAmU,oBAAA3B,EAAA,mBACAxS,KAAAmT,YAAAX,EAAA,YASAnH,YAAAU,UAAAiG,UAAA,SAAA5P,GACApC,KAAAkL,QAAA9I,GAUAiJ,YAAAU,UAAA2G,UAAA,SAAAJ,GACA,GAAAE,KACAA,GAAAvL,KAAA,wBAAAjH,KAAA+T,KAAA,KACA,IAAAK,GAAApU,KAAAmU,oBAAAnU,KAAAmU,oBAAA,KACA3B,GAAAvL,KAAA,uBAAAmN,EAAA,KAEA,gBAAApU,MAAAiU,SACA,gBAAAjU,MAAAiU,QAAA,IAAAjU,KAAAiU,QAAA,GAAA,GACAjU,KAAAiU,QAAA,GAAAjU,KAAAqT,QACAb,EAAAvL,KAAA,WAAAjH,KAAAqT,QAAArT,KAAAiU,QAAA,IACA,mBAAAjU,KAAAiU,QAAA,GAAA,OACA,gBAAAjU,MAAAiU,QAAA,IAAAjU,KAAAiU,QAAA,GAAA,IACAjU,KAAAiU,QAAA,GAAAjU,KAAAqT,QACAb,EAAAvL,KAAA,UAAAjH,KAAAqT,QAAA,oBAAArT,KAAAqT,QAAArT,KAAAiU,QAAA,IACA,OAEAzB,EAAAvL,KAAA,UAAAjH,KAAAqT,QAAA,mBAAArT,KAAAqT,QACA,OAEA,gBAAArT,MAAAiU,QAAA,IAAAjU,KAAAiU,QAAA,GAAA,GACAjU,KAAAiU,QAAA,GAAAjU,KAAAoT,OACAZ,EAAAvL,KAAA,UAAAjH,KAAAoT,OAAApT,KAAAiU,QAAA,IACA,oBAAAjU,KAAAiU,QAAA,GAAA,OAEAzB,EAAAvL,KAAA,SAAAjH,KAAAoT,OAAA,2BAGAZ,EAAAvL,KAAA,UAAAjH,KAAAqT,QAAA,mBACArT,KAAAqT,QAAA,aAAArT,KAAAoT,OAAA,yBAGA,IAAAiB,GAAArU,KAAAgU,WAAAhU,KAAAgU,WAAA,QACAM,EAAAtU,KAAAkU,UAAAlU,KAAAkU,UAAA,EAKA,OAHA1B,GAAAvL,KAAA,uBAAAqL,EAAA/C,EAAA,YACA+C,EAAAhD,EAAA,aAAA+E,EAAA,kCACAC,EAAA,sDACA9B,EAAA+B,KAAA,KAOArE,OAAA,gBAAAxI,gBACAA,gBAAAqE,UAAA,UAAArE,gBAAAqE,UAAAiC,UACAtG,gBAAAqE,UAAA,WAAArE,gBAAAqE,UAAArB,WACAhD,gBAAAqE,UAAA,aACArE,gBAAAqE,UAAA+D,aACApI,gBAAAqE,UAAA,gBACArE,gBAAAqE,UAAAQ,gBACA7E,gBAAAqE,UAAA,cACArE,gBAAAqE,UAAA4B,cACAjG,gBAAAqE,UAAA,YACArE,gBAAAqE,UAAAhB,YACArD,gBAAAqE,UAAA,kBACArE,gBAAAqE,UAAA8C,kBACAnH,gBAAAqE,UAAA,OAAArE,gBAAAqE,UAAAjB,OACApD,gBAAAqE,UAAA,WAAArE,gBAAAqE,UAAAS,WACA9E,gBAAAqE,UAAA,WAAArE,gBAAAqE,UAAAmB,WACAxF,gBAAAqE,UAAA,UAAArE,gBAAAqE,UAAAT,UACA5D,gBAAAqE,UAAA,iBACArE,gBAAAqE,UAAA2C,iBACAhH,gBAAAqE,UAAA,gBACArE,gBAAAqE,UAAAgB,gBACArF,gBAAAqE,UAAA,OAAArE,gBAAAqE,UAAAtB,OACA/C,gBAAAqE,UAAA,aACArE,gBAAAqE,UAAAqC,aACA1G,gBAAAqE,UAAA,cACArE,gBAAAqE,UAAAuC,cACA5G,gBAAAqE,UAAA,cACArE,gBAAAqE,UAAAvB,cACA9C,gBAAAqE,UAAA,QACArE,gBAAAqE,UAAAgC,QACArG,gBAAAqE,UAAA,cACArE,gBAAAqE,UAAA0B,cACA/F,gBAAAqE,UAAA,YACArE,gBAAAqE,UAAA4C,YACAjH,gBAAAqE,UAAA,WACArE,gBAAAqE,UAAAiB,WACAtF,gBAAAqE,UAAA,MAAArE,gBAAAqE,UAAAI,MACAzE,gBAAAqE,UAAA,KAAArE,gBAAAqE,UAAAM,KAEA1B,QAAAoB,UAAA,UAAApB,QAAAoB,UAAAoF,UACAxG,QAAAoB,UAAA,QAAApB,QAAAoB,UAAA6F,QACAjH,QAAAoB,UAAA,WAAApB,QAAAoB,UAAAS,WAEAnB,YAAAU,UAAA,MAAAV,YAAAU,UAAAI,MACAd,YAAAU,UAAA,KAAAV,YAAAU,UAAAM,KACAhB,YAAAU,UAAA,SAAAV,YAAAU,UAAA0H","file":"hybrid-store-locator.min.js","sourcesContent":["/**\n * HybridStoreLocator class\n * * @param  {Object} hsl_options\n * - styledMap: Custom styled maps object. Get it from https://snazzymaps.com/\n * - mapId: Id of container for google map\n * - listId: Id of container for store list\n * - paginationId: Id of container for pagination links\n * - selectorId: Id of container for state selector buttons\n * - styledMap: gogole map style object\n * - zoom: zoom level\n * - centerLat\n * - centerLng\n * - cluster_options\n * - paginationLength\n * - paginationItemsPerPage\n * - storesUrl: Url to load stores. Will be ignored if stores is defined.\n * - stores: array of store address object (refer to dist/stores.json for foramt)\n */\n\nfunction HybridStoreLocator(options){\n    var that = this;\n    this.current_list = [];\n    this.current_page = 0;\n    this.state_selected = false;\n    this.options = {\n            mapId: 'hsl_gmap_canvas',\n            listId: 'hsl-address-list',\n            paginationId: 'hsl-address-pagination',\n            selectorId: 'hsl-state-selector',\n            styledMap: [{\"featureType\":\"all\",\"elementType\":\"labels.text.fill\",\"stylers\":[{\"saturation\":36},{\"color\":\"#333333\"},{\"lightness\":40}]},{\"featureType\":\"all\",\"elementType\":\"labels.text.stroke\",\"stylers\":[{\"visibility\":\"on\"},{\"color\":\"#ffffff\"},{\"lightness\":16}]},{\"featureType\":\"all\",\"elementType\":\"labels.icon\",\"stylers\":[{\"visibility\":\"off\"}]},{\"featureType\":\"administrative\",\"elementType\":\"geometry.fill\",\"stylers\":[{\"lightness\":20}]},{\"featureType\":\"administrative\",\"elementType\":\"geometry.stroke\",\"stylers\":[{\"lightness\":17},{\"weight\":1.2},{\"color\":\"#ffffff\"}]},{\"featureType\":\"landscape\",\"elementType\":\"geometry\",\"stylers\":[{\"color\":\"#e3d7bf\"},{\"lightness\":20}]},{\"featureType\":\"landscape.man_made\",\"elementType\":\"geometry.fill\",\"stylers\":[{\"color\":\"#f1ebdf\"}]},{\"featureType\":\"landscape.natural.landcover\",\"elementType\":\"geometry.fill\",\"stylers\":[{\"color\":\"#e7d6b5\"}]},{\"featureType\":\"landscape.natural.terrain\",\"elementType\":\"geometry.fill\",\"stylers\":[{\"color\":\"#e7d6b5\"}]},{\"featureType\":\"poi\",\"elementType\":\"geometry\",\"stylers\":[{\"color\":\"#f5f5f5\"},{\"lightness\":21}]},{\"featureType\":\"poi.business\",\"elementType\":\"geometry.fill\",\"stylers\":[{\"color\":\"#b89e49\"},{\"lightness\":\"71\"}]},{\"featureType\":\"poi.government\",\"elementType\":\"geometry.fill\",\"stylers\":[{\"color\":\"#b89e49\"},{\"lightness\":\"39\"}]},{\"featureType\":\"poi.park\",\"elementType\":\"geometry\",\"stylers\":[{\"color\":\"#dedede\"},{\"lightness\":21}]},{\"featureType\":\"poi.park\",\"elementType\":\"geometry.fill\",\"stylers\":[{\"color\":\"#e7d6b5\"}]},{\"featureType\":\"road.highway\",\"elementType\":\"geometry.fill\",\"stylers\":[{\"color\":\"#ffffff\"},{\"lightness\":17}]},{\"featureType\":\"road.highway\",\"elementType\":\"geometry.stroke\",\"stylers\":[{\"color\":\"#ffffff\"},{\"lightness\":29},{\"weight\":0.2}]},{\"featureType\":\"road.arterial\",\"elementType\":\"geometry\",\"stylers\":[{\"color\":\"#ffffff\"},{\"lightness\":18}]},{\"featureType\":\"road.local\",\"elementType\":\"geometry\",\"stylers\":[{\"color\":\"#ffffff\"},{\"lightness\":16}]},{\"featureType\":\"transit\",\"elementType\":\"geometry\",\"stylers\":[{\"color\":\"#f2f2f2\"},{\"lightness\":19}]},{\"featureType\":\"water\",\"elementType\":\"geometry\",\"stylers\":[{\"color\":\"#e9e9e9\"},{\"lightness\":17}]},{\"featureType\":\"water\",\"elementType\":\"geometry.fill\",\"stylers\":[{\"color\":\"#c9b166\"}]}],\n            zoom: 4,\n            centerLat: -26.372185,\n            centerLng: -225.860597,\n            storesUrl: 'dist/stores.json',\n            paginationItemsPerPage: 3,\n            paginationLength: 3,\n            stores: false\n        };\n\n    this.constructor = function(options){\n        if(options){\n            that.options = that.mergeOptions(that.options, options);\n        }\n    }\n\n    this.log = function(msg){\n        if(console) console.log(msg);\n    }\n\n    this.mergeOptions = function(obj1, obj2){\n        var obj3 = {};\n        for (var attrname in obj1) { obj3[attrname] = obj1[attrname]; }\n        for (var attrname in obj2) { obj3[attrname] = obj2[attrname]; }\n        return obj3;\n    }\n\n    this.stores = [];\n    this.markers = [];\n\n    this.constructor(options);\n\n    this.init = function(){\n        var mapOptions = {\n            zoom: this.options.zoom,\n            center:new google.maps.LatLng(this.options.centerLat, this.options.centerLng),\n            mapTypeId: google.maps.MapTypeId.ROADMAP,\n            mapTypeControlOptions: {\n                mapTypeIds: ['satellite', 'hybrid', 'styled_map']\n            }\n        };\n\n        var styledMapType = new google.maps.StyledMapType(this.options.styledMap, {name: 'Map'});\n\n        that.map = new google.maps.Map(document.getElementById(this.options.mapId),mapOptions);\n        that.map.mapTypes.set('styled_map', styledMapType);\n        that.map.setMapTypeId('styled_map');\n        this.geoLocate();\n\n        $('#'+that.options.paginationId).on('click', '.address-pagination__index', that.updatePage);\n        $('#'+that.options.selectorId+' button').click(function(){\n            $(this).siblings().removeClass('button--active');\n            $(this).addClass('button--active');\n            that.selectState($(this).data('state'));\n        });\n    };\n\n    this.geoLocate = function(){\n        var tryAPIGeolocation = function(cb) {\n            jQuery.post( \"https://www.googleapis.com/geolocation/v1/geolocate?key=AIzaSyCc9-uuB1cZ5jXKFLCo9gUq9ACc9WVECPI\", function(data) {\n                cb({coords: {latitude: data.location.lat, longitude: data.location.lng}})\n            }).fail(function(err) {\n                console.log(\"API Geolocation error!\", err);\n            });\n        };\n\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(this.geoSort, function(error) {\n                switch (error.code) {\n                    case error.TIMEOUT:\n                        that.log(\"Browser geolocation error: Timeout.\");\n                        break;\n                    case error.PERMISSION_DENIED:\n                        if(error.message.indexOf(\"Only secure origins are allowed\") == 0) {\n                            tryAPIGeolocation(that.geoSort);\n                        }\n                        break;\n                    case error.POSITION_UNAVAILABLE:\n                        that.log(\"Browser geolocation error: Position unavailable.\");\n                        break;\n                }\n            });\n        }\n    }\n\n    this.geoSort = function(position){\n        var lat = position.coords.latitude;\n        var lng = position.coords.longitude;\n\n        jQuery.get(that.options.storesUrl, function(stores){\n            that.stores = stores.map(function(store, i){\n                store.distance_p2 = Math.sqrt(Math.pow(lat-store.lat , 2) + Math.pow(lng-store.lng, 2));\n                return store;\n            });\n            that.stores.sort(function(a,b){return (a.distance_p2) - (b.distance_p2)});\n            jQuery('#js-state-selector button').removeClass('button--active');\n            that.listStores();\n            that.setupMarkers();\n        });\n    }\n\n    this.setupMarkers = function(){\n        that.markers = that.stores.map(function(location, i) {\n            var marker = new google.maps.Marker({\n                position: {lat: location.lat, lng: location.lng}\n            });\n\n            var infowindow = new google.maps.InfoWindow({\n                content:'<div class=\"marker\"><strong>'+location.name+'</strong><p><a target=\"_blank\"' +\n                    ' href=\"https://www.google.com/maps/dir//'+location.lat+','+location.lng+'\">'+location.address+'</a><p></div>'\n            });\n\n            google.maps.event.addListener(marker, 'click', function(){\n                infowindow.open(that.map, marker);\n            });\n\n            return marker;\n        });\n\n        var cluster_options = {imagePath: 'dist/images/C', styles: []};\n        for(var i=0; i<5; i++) cluster_options.styles.push({\n                url: 'dist/images/C'+(i+1)+'.png',\n                height: 53,\n                width: 37,\n                iconAnchor: [37/2, 53],\n                anchor: [10, 0],\n                textSize: '20',\n                textColor: '#B0A171'\n            });\n\n        if(that.options.cluster_options){\n            that.options.cluster_options = that.mergeOptions(cluster_options, that.options.cluster_options);\n        } else {\n            that.options.cluster_options = cluster_options;\n        }\n\n        that.markerCluster = new MarkerClusterer(that.map, that.markers, that.options.cluster_options);\n    }\n\n    this.listStores = function(stores){\n        if(stores){\n            that.current_list = stores;\n        } else {\n            that.current_list = that.stores;\n        }\n\n        that.current_page = 0;\n        //if(that.state_selected) \n            that.renderStores();\n    }\n\n    this.renderStores = function(){\n        var dom_address_list = $('#'+that.options.listId);\n        dom_address_list.html('');\n        $.each(that.current_list.slice(that.current_page*that.options.paginationItemsPerPage, (that.current_page+1)*that.options.paginationItemsPerPage), function(){\n            dom_address_list.append('<li class=\"addresses__address\"><div><h5>'+this.name+'</h5><p><strong>'+this.address+'</strong><br>ph: <a href=\"tel:'+this.phone+'\">'+this.phone+'</a><br><a href=\"https://www.google.com/maps/dir//'+this.lat+','+this.lng+'\" target=\"_blank\" class=\"get-directions\">Get Directions</a></p></div></li>');\n        });\n        that.renderPagination(0, Math.floor(that.current_list.length/that.options.paginationItemsPerPage), that.current_page);\n    }\n\n    this.renderPagination = function(start, end, current_page){\n        var dom_pagination_block = $('#'+that.options.paginationId);\n        $(dom_pagination_block).html('');\n        var active_class = '';\n        var s = Math.max(start, that.current_page-that.options.paginationLength);\n        var e = Math.min(end, that.current_page+that.options.paginationLength);\n        if(end>that.options.paginationLength*2){\n            if(e<end-that.options.paginationLength*2){\n                e += that.options.paginationLength*2*2 - e + s;\n            } else {\n                s -= that.options.paginationLength*2*2 -e + s;\n            }\n        }\n        if(that.current_page>(that.options.paginationLength*2))\n            dom_pagination_block.append('<li class=\"address-pagination__index\" data-page=\"'+start+'\">&#x21e4;</li>');\n        if(that.current_page>0)\n            dom_pagination_block.append('<li rel=\"prev\" class=\"address-pagination__index\" data-page=\"'+(that.current_page-1)+'\">&#x2190;</li>');\n        for(var i=s; i<e; i++){\n            active_class = '';\n            if(i==that.current_page) active_class = 'active';\n            dom_pagination_block.append('<li class=\"address-pagination__index '+active_class+'\" data-page=\"'+i+'\">'+(i+1)+'</li>');\n        }\n        if(that.current_page<end-1)\n            dom_pagination_block.append('<li rel=\"next\" class=\"address-pagination__index\" data-page=\"'+(that.current_page+1)+'\">&#x2192;</li>');\n        if(that.current_page<(end-that.options.paginationLength*2-1))\n            dom_pagination_block.append('<li class=\"address-pagination__index\" data-page=\"'+(end-1)+'\">&#x21e5;</li>');\n    }\n\n    this.selectState = function(state){\n        that.state_selected = true;\n        that.listStores(that.stores.filter(function(store){\n            return store.state == state;\n        }));\n    }\n\n    this.updatePage = function(){\n        that.current_page = parseInt($(this).data('page'));\n        that.renderStores();\n    }\n}","// ==ClosureCompiler==\n// @compilation_level ADVANCED_OPTIMIZATIONS\n// @externs_url https://raw.githubusercontent.com/google/closure-compiler/master/contrib/externs/maps/google_maps_api_v3.js\n// ==/ClosureCompiler==\n\n/**\n * @name MarkerClusterer for Google Maps v3\n * @version version 1.0\n * @author Luke Mahe\n * @fileoverview\n * The library creates and manages per-zoom-level clusters for large amounts of\n * markers.\n * <br/>\n * This is a v3 implementation of the\n * <a href=\"http://gmaps-utility-library-dev.googlecode.com/svn/tags/markerclusterer/\"\n * >v2 MarkerClusterer</a>.\n */\n\n/**\n * @license\n * Copyright 2010 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * A Marker Clusterer that clusters markers.\n *\n * @param {google.maps.Map} map The Google map to attach to.\n * @param {Array.<google.maps.Marker>=} opt_markers Optional markers to add to\n *   the cluster.\n * @param {Object=} opt_options support the following options:\n *     'gridSize': (number) The grid size of a cluster in pixels.\n *     'maxZoom': (number) The maximum zoom level that a marker can be part of a\n *                cluster.\n *     'zoomOnClick': (boolean) Whether the default behaviour of clicking on a\n *                    cluster is to zoom into it.\n *     'averageCenter': (boolean) Whether the center of each cluster should be\n *                      the average of all markers in the cluster.\n *     'minimumClusterSize': (number) The minimum number of markers to be in a\n *                           cluster before the markers are hidden and a count\n *                           is shown.\n *     'styles': (object) An object that has style properties:\n *       'url': (string) The image url.\n *       'height': (number) The image height.\n *       'width': (number) The image width.\n *       'anchor': (Array) The anchor position of the label text.\n *       'textColor': (string) The text color.\n *       'textSize': (number) The text size.\n *       'backgroundPosition': (string) The position of the backgound x, y.\n *       'iconAnchor': (Array) The anchor position of the icon x, y.\n * @constructor\n * @extends google.maps.OverlayView\n */\nfunction MarkerClusterer(map, opt_markers, opt_options) {\n    // MarkerClusterer implements google.maps.OverlayView interface. We use the\n    // extend function to extend MarkerClusterer with google.maps.OverlayView\n    // because it might not always be available when the code is defined so we\n    // look for it at the last possible moment. If it doesn't exist now then\n    // there is no point going ahead :)\n    this.extend(MarkerClusterer, google.maps.OverlayView);\n    this.map_ = map;\n\n    /**\n     * @type {Array.<google.maps.Marker>}\n     * @private\n     */\n    this.markers_ = [];\n\n    /**\n     *  @type {Array.<Cluster>}\n     */\n    this.clusters_ = [];\n\n    this.sizes = [53, 56, 66, 78, 90];\n\n    /**\n     * @private\n     */\n    this.styles_ = [];\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.ready_ = false;\n\n    var options = opt_options || {};\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.gridSize_ = options['gridSize'] || 60;\n\n    /**\n     * @private\n     */\n    this.minClusterSize_ = options['minimumClusterSize'] || 2;\n\n\n    /**\n     * @type {?number}\n     * @private\n     */\n    this.maxZoom_ = options['maxZoom'] || null;\n\n    this.styles_ = options['styles'] || [];\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.imagePath_ = options['imagePath'] ||\n        this.MARKER_CLUSTER_IMAGE_PATH_;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.imageExtension_ = options['imageExtension'] ||\n        this.MARKER_CLUSTER_IMAGE_EXTENSION_;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.zoomOnClick_ = true;\n\n    if (options['zoomOnClick'] != undefined) {\n        this.zoomOnClick_ = options['zoomOnClick'];\n    }\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.averageCenter_ = false;\n\n    if (options['averageCenter'] != undefined) {\n        this.averageCenter_ = options['averageCenter'];\n    }\n\n    this.setupStyles_();\n\n    this.setMap(map);\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.prevZoom_ = this.map_.getZoom();\n\n    // Add the map event listeners\n    var that = this;\n    google.maps.event.addListener(this.map_, 'zoom_changed', function() {\n        var zoom = that.map_.getZoom();\n\n        if (that.prevZoom_ != zoom) {\n            that.prevZoom_ = zoom;\n            that.resetViewport();\n        }\n    });\n\n    google.maps.event.addListener(this.map_, 'idle', function() {\n        that.redraw();\n    });\n\n    // Finally, add the markers\n    if (opt_markers && opt_markers.length) {\n        this.addMarkers(opt_markers, false);\n    }\n}\n\n\n/**\n * The marker cluster image path.\n *\n * @type {string}\n * @private\n */\nMarkerClusterer.prototype.MARKER_CLUSTER_IMAGE_PATH_ = '../images/m';\n\n\n/**\n * The marker cluster image path.\n *\n * @type {string}\n * @private\n */\nMarkerClusterer.prototype.MARKER_CLUSTER_IMAGE_EXTENSION_ = 'png';\n\n\n/**\n * Extends a objects prototype by anothers.\n *\n * @param {Object} obj1 The object to be extended.\n * @param {Object} obj2 The object to extend with.\n * @return {Object} The new extended object.\n * @ignore\n */\nMarkerClusterer.prototype.extend = function(obj1, obj2) {\n    return (function(object) {\n        for (var property in object.prototype) {\n            this.prototype[property] = object.prototype[property];\n        }\n        return this;\n    }).apply(obj1, [obj2]);\n};\n\n\n/**\n * Implementaion of the interface method.\n * @ignore\n */\nMarkerClusterer.prototype.onAdd = function() {\n    this.setReady_(true);\n};\n\n/**\n * Implementaion of the interface method.\n * @ignore\n */\nMarkerClusterer.prototype.draw = function() {};\n\n/**\n * Sets up the styles object.\n *\n * @private\n */\nMarkerClusterer.prototype.setupStyles_ = function() {\n    if (this.styles_.length) {\n        return;\n    }\n\n    for (var i = 0, size; size = this.sizes[i]; i++) {\n        this.styles_.push({\n            url: this.imagePath_ + (i + 1) + '.' + this.imageExtension_,\n            height: size,\n            width: size\n        });\n    }\n};\n\n/**\n *  Fit the map to the bounds of the markers in the clusterer.\n */\nMarkerClusterer.prototype.fitMapToMarkers = function() {\n    var markers = this.getMarkers();\n    var bounds = new google.maps.LatLngBounds();\n    for (var i = 0, marker; marker = markers[i]; i++) {\n        bounds.extend(marker.getPosition());\n    }\n\n    this.map_.fitBounds(bounds);\n};\n\n\n/**\n *  Sets the styles.\n *\n *  @param {Object} styles The style to set.\n */\nMarkerClusterer.prototype.setStyles = function(styles) {\n    this.styles_ = styles;\n};\n\n\n/**\n *  Gets the styles.\n *\n *  @return {Object} The styles object.\n */\nMarkerClusterer.prototype.getStyles = function() {\n    return this.styles_;\n};\n\n\n/**\n * Whether zoom on click is set.\n *\n * @return {boolean} True if zoomOnClick_ is set.\n */\nMarkerClusterer.prototype.isZoomOnClick = function() {\n    return this.zoomOnClick_;\n};\n\n/**\n * Whether average center is set.\n *\n * @return {boolean} True if averageCenter_ is set.\n */\nMarkerClusterer.prototype.isAverageCenter = function() {\n    return this.averageCenter_;\n};\n\n\n/**\n *  Returns the array of markers in the clusterer.\n *\n *  @return {Array.<google.maps.Marker>} The markers.\n */\nMarkerClusterer.prototype.getMarkers = function() {\n    return this.markers_;\n};\n\n\n/**\n *  Returns the number of markers in the clusterer\n *\n *  @return {Number} The number of markers.\n */\nMarkerClusterer.prototype.getTotalMarkers = function() {\n    return this.markers_.length;\n};\n\n\n/**\n *  Sets the max zoom for the clusterer.\n *\n *  @param {number} maxZoom The max zoom level.\n */\nMarkerClusterer.prototype.setMaxZoom = function(maxZoom) {\n    this.maxZoom_ = maxZoom;\n};\n\n\n/**\n *  Gets the max zoom for the clusterer.\n *\n *  @return {number} The max zoom level.\n */\nMarkerClusterer.prototype.getMaxZoom = function() {\n    return this.maxZoom_;\n};\n\n\n/**\n *  The function for calculating the cluster icon image.\n *\n *  @param {Array.<google.maps.Marker>} markers The markers in the clusterer.\n *  @param {number} numStyles The number of styles available.\n *  @return {Object} A object properties: 'text' (string) and 'index' (number).\n *  @private\n */\nMarkerClusterer.prototype.calculator_ = function(markers, numStyles) {\n    var index = 0;\n    var count = markers.length;\n    var dv = count;\n    while (dv !== 0) {\n        dv = parseInt(dv / 10, 10);\n        index++;\n    }\n\n    index = Math.min(index, numStyles);\n    return {\n        text: count,\n        index: index\n    };\n};\n\n\n/**\n * Set the calculator function.\n *\n * @param {function(Array, number)} calculator The function to set as the\n *     calculator. The function should return a object properties:\n *     'text' (string) and 'index' (number).\n *\n */\nMarkerClusterer.prototype.setCalculator = function(calculator) {\n    this.calculator_ = calculator;\n};\n\n\n/**\n * Get the calculator function.\n *\n * @return {function(Array, number)} the calculator function.\n */\nMarkerClusterer.prototype.getCalculator = function() {\n    return this.calculator_;\n};\n\n\n/**\n * Add an array of markers to the clusterer.\n *\n * @param {Array.<google.maps.Marker>} markers The markers to add.\n * @param {boolean=} opt_nodraw Whether to redraw the clusters.\n */\nMarkerClusterer.prototype.addMarkers = function(markers, opt_nodraw) {\n    for (var i = 0, marker; marker = markers[i]; i++) {\n        this.pushMarkerTo_(marker);\n    }\n    if (!opt_nodraw) {\n        this.redraw();\n    }\n};\n\n\n/**\n * Pushes a marker to the clusterer.\n *\n * @param {google.maps.Marker} marker The marker to add.\n * @private\n */\nMarkerClusterer.prototype.pushMarkerTo_ = function(marker) {\n    marker.isAdded = false;\n    if (marker['draggable']) {\n        // If the marker is draggable add a listener so we update the clusters on\n        // the drag end.\n        var that = this;\n        google.maps.event.addListener(marker, 'dragend', function() {\n            marker.isAdded = false;\n            that.repaint();\n        });\n    }\n    this.markers_.push(marker);\n};\n\n\n/**\n * Adds a marker to the clusterer and redraws if needed.\n *\n * @param {google.maps.Marker} marker The marker to add.\n * @param {boolean=} opt_nodraw Whether to redraw the clusters.\n */\nMarkerClusterer.prototype.addMarker = function(marker, opt_nodraw) {\n    this.pushMarkerTo_(marker);\n    if (!opt_nodraw) {\n        this.redraw();\n    }\n};\n\n\n/**\n * Removes a marker and returns true if removed, false if not\n *\n * @param {google.maps.Marker} marker The marker to remove\n * @return {boolean} Whether the marker was removed or not\n * @private\n */\nMarkerClusterer.prototype.removeMarker_ = function(marker) {\n    var index = -1;\n    if (this.markers_.indexOf) {\n        index = this.markers_.indexOf(marker);\n    } else {\n        for (var i = 0, m; m = this.markers_[i]; i++) {\n            if (m == marker) {\n                index = i;\n                break;\n            }\n        }\n    }\n\n    if (index == -1) {\n        // Marker is not in our list of markers.\n        return false;\n    }\n\n    marker.setMap(null);\n\n    this.markers_.splice(index, 1);\n\n    return true;\n};\n\n\n/**\n * Remove a marker from the cluster.\n *\n * @param {google.maps.Marker} marker The marker to remove.\n * @param {boolean=} opt_nodraw Optional boolean to force no redraw.\n * @return {boolean} True if the marker was removed.\n */\nMarkerClusterer.prototype.removeMarker = function(marker, opt_nodraw) {\n    var removed = this.removeMarker_(marker);\n\n    if (!opt_nodraw && removed) {\n        this.resetViewport();\n        this.redraw();\n        return true;\n    } else {\n        return false;\n    }\n};\n\n\n/**\n * Removes an array of markers from the cluster.\n *\n * @param {Array.<google.maps.Marker>} markers The markers to remove.\n * @param {boolean=} opt_nodraw Optional boolean to force no redraw.\n */\nMarkerClusterer.prototype.removeMarkers = function(markers, opt_nodraw) {\n    var removed = false;\n\n    for (var i = 0, marker; marker = markers[i]; i++) {\n        var r = this.removeMarker_(marker);\n        removed = removed || r;\n    }\n\n    if (!opt_nodraw && removed) {\n        this.resetViewport();\n        this.redraw();\n        return true;\n    }\n};\n\n\n/**\n * Sets the clusterer's ready state.\n *\n * @param {boolean} ready The state.\n * @private\n */\nMarkerClusterer.prototype.setReady_ = function(ready) {\n    if (!this.ready_) {\n        this.ready_ = ready;\n        this.createClusters_();\n    }\n};\n\n\n/**\n * Returns the number of clusters in the clusterer.\n *\n * @return {number} The number of clusters.\n */\nMarkerClusterer.prototype.getTotalClusters = function() {\n    return this.clusters_.length;\n};\n\n\n/**\n * Returns the google map that the clusterer is associated with.\n *\n * @return {google.maps.Map} The map.\n */\nMarkerClusterer.prototype.getMap = function() {\n    return this.map_;\n};\n\n\n/**\n * Sets the google map that the clusterer is associated with.\n *\n * @param {google.maps.Map} map The map.\n */\nMarkerClusterer.prototype.setMap = function(map) {\n    this.map_ = map;\n};\n\n\n/**\n * Returns the size of the grid.\n *\n * @return {number} The grid size.\n */\nMarkerClusterer.prototype.getGridSize = function() {\n    return this.gridSize_;\n};\n\n\n/**\n * Sets the size of the grid.\n *\n * @param {number} size The grid size.\n */\nMarkerClusterer.prototype.setGridSize = function(size) {\n    this.gridSize_ = size;\n};\n\n\n/**\n * Returns the min cluster size.\n *\n * @return {number} The grid size.\n */\nMarkerClusterer.prototype.getMinClusterSize = function() {\n    return this.minClusterSize_;\n};\n\n/**\n * Sets the min cluster size.\n *\n * @param {number} size The grid size.\n */\nMarkerClusterer.prototype.setMinClusterSize = function(size) {\n    this.minClusterSize_ = size;\n};\n\n\n/**\n * Extends a bounds object by the grid size.\n *\n * @param {google.maps.LatLngBounds} bounds The bounds to extend.\n * @return {google.maps.LatLngBounds} The extended bounds.\n */\nMarkerClusterer.prototype.getExtendedBounds = function(bounds) {\n    var projection = this.getProjection();\n\n    // Turn the bounds into latlng.\n    var tr = new google.maps.LatLng(bounds.getNorthEast().lat(),\n        bounds.getNorthEast().lng());\n    var bl = new google.maps.LatLng(bounds.getSouthWest().lat(),\n        bounds.getSouthWest().lng());\n\n    // Convert the points to pixels and the extend out by the grid size.\n    var trPix = projection.fromLatLngToDivPixel(tr);\n    trPix.x += this.gridSize_;\n    trPix.y -= this.gridSize_;\n\n    var blPix = projection.fromLatLngToDivPixel(bl);\n    blPix.x -= this.gridSize_;\n    blPix.y += this.gridSize_;\n\n    // Convert the pixel points back to LatLng\n    var ne = projection.fromDivPixelToLatLng(trPix);\n    var sw = projection.fromDivPixelToLatLng(blPix);\n\n    // Extend the bounds to contain the new bounds.\n    bounds.extend(ne);\n    bounds.extend(sw);\n\n    return bounds;\n};\n\n\n/**\n * Determins if a marker is contained in a bounds.\n *\n * @param {google.maps.Marker} marker The marker to check.\n * @param {google.maps.LatLngBounds} bounds The bounds to check against.\n * @return {boolean} True if the marker is in the bounds.\n * @private\n */\nMarkerClusterer.prototype.isMarkerInBounds_ = function(marker, bounds) {\n    return bounds.contains(marker.getPosition());\n};\n\n\n/**\n * Clears all clusters and markers from the clusterer.\n */\nMarkerClusterer.prototype.clearMarkers = function() {\n    this.resetViewport(true);\n\n    // Set the markers a empty array.\n    this.markers_ = [];\n};\n\n\n/**\n * Clears all existing clusters and recreates them.\n * @param {boolean} opt_hide To also hide the marker.\n */\nMarkerClusterer.prototype.resetViewport = function(opt_hide) {\n    // Remove all the clusters\n    for (var i = 0, cluster; cluster = this.clusters_[i]; i++) {\n        cluster.remove();\n    }\n\n    // Reset the markers to not be added and to be invisible.\n    for (var i = 0, marker; marker = this.markers_[i]; i++) {\n        marker.isAdded = false;\n        if (opt_hide) {\n            marker.setMap(null);\n        }\n    }\n\n    this.clusters_ = [];\n};\n\n/**\n *\n */\nMarkerClusterer.prototype.repaint = function() {\n    var oldClusters = this.clusters_.slice();\n    this.clusters_.length = 0;\n    this.resetViewport();\n    this.redraw();\n\n    // Remove the old clusters.\n    // Do it in a timeout so the other clusters have been drawn first.\n    window.setTimeout(function() {\n        for (var i = 0, cluster; cluster = oldClusters[i]; i++) {\n            cluster.remove();\n        }\n    }, 0);\n};\n\n\n/**\n * Redraws the clusters.\n */\nMarkerClusterer.prototype.redraw = function() {\n    this.createClusters_();\n};\n\n\n/**\n * Calculates the distance between two latlng locations in km.\n * @see http://www.movable-type.co.uk/scripts/latlong.html\n *\n * @param {google.maps.LatLng} p1 The first lat lng point.\n * @param {google.maps.LatLng} p2 The second lat lng point.\n * @return {number} The distance between the two points in km.\n * @private\n */\nMarkerClusterer.prototype.distanceBetweenPoints_ = function(p1, p2) {\n    if (!p1 || !p2) {\n        return 0;\n    }\n\n    var R = 6371; // Radius of the Earth in km\n    var dLat = (p2.lat() - p1.lat()) * Math.PI / 180;\n    var dLon = (p2.lng() - p1.lng()) * Math.PI / 180;\n    var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n        Math.cos(p1.lat() * Math.PI / 180) * Math.cos(p2.lat() * Math.PI / 180) *\n        Math.sin(dLon / 2) * Math.sin(dLon / 2);\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    var d = R * c;\n    return d;\n};\n\n\n/**\n * Add a marker to a cluster, or creates a new cluster.\n *\n * @param {google.maps.Marker} marker The marker to add.\n * @private\n */\nMarkerClusterer.prototype.addToClosestCluster_ = function(marker) {\n    var distance = 40000; // Some large number\n    var clusterToAddTo = null;\n    var pos = marker.getPosition();\n    for (var i = 0, cluster; cluster = this.clusters_[i]; i++) {\n        var center = cluster.getCenter();\n        if (center) {\n            var d = this.distanceBetweenPoints_(center, marker.getPosition());\n            if (d < distance) {\n                distance = d;\n                clusterToAddTo = cluster;\n            }\n        }\n    }\n\n    if (clusterToAddTo && clusterToAddTo.isMarkerInClusterBounds(marker)) {\n        clusterToAddTo.addMarker(marker);\n    } else {\n        var cluster = new Cluster(this);\n        cluster.addMarker(marker);\n        this.clusters_.push(cluster);\n    }\n};\n\n\n/**\n * Creates the clusters.\n *\n * @private\n */\nMarkerClusterer.prototype.createClusters_ = function() {\n    if (!this.ready_) {\n        return;\n    }\n\n    // Get our current map view bounds.\n    // Create a new bounds object so we don't affect the map.\n    var mapBounds = new google.maps.LatLngBounds(this.map_.getBounds().getSouthWest(),\n        this.map_.getBounds().getNorthEast());\n    var bounds = this.getExtendedBounds(mapBounds);\n\n    for (var i = 0, marker; marker = this.markers_[i]; i++) {\n        if (!marker.isAdded && this.isMarkerInBounds_(marker, bounds)) {\n            this.addToClosestCluster_(marker);\n        }\n    }\n};\n\n\n/**\n * A cluster that contains markers.\n *\n * @param {MarkerClusterer} markerClusterer The markerclusterer that this\n *     cluster is associated with.\n * @constructor\n * @ignore\n */\nfunction Cluster(markerClusterer) {\n    this.markerClusterer_ = markerClusterer;\n    this.map_ = markerClusterer.getMap();\n    this.gridSize_ = markerClusterer.getGridSize();\n    this.minClusterSize_ = markerClusterer.getMinClusterSize();\n    this.averageCenter_ = markerClusterer.isAverageCenter();\n    this.center_ = null;\n    this.markers_ = [];\n    this.bounds_ = null;\n    this.clusterIcon_ = new ClusterIcon(this, markerClusterer.getStyles(),\n        markerClusterer.getGridSize());\n}\n\n/**\n * Determins if a marker is already added to the cluster.\n *\n * @param {google.maps.Marker} marker The marker to check.\n * @return {boolean} True if the marker is already added.\n */\nCluster.prototype.isMarkerAlreadyAdded = function(marker) {\n    if (this.markers_.indexOf) {\n        return this.markers_.indexOf(marker) != -1;\n    } else {\n        for (var i = 0, m; m = this.markers_[i]; i++) {\n            if (m == marker) {\n                return true;\n            }\n        }\n    }\n    return false;\n};\n\n\n/**\n * Add a marker the cluster.\n *\n * @param {google.maps.Marker} marker The marker to add.\n * @return {boolean} True if the marker was added.\n */\nCluster.prototype.addMarker = function(marker) {\n    if (this.isMarkerAlreadyAdded(marker)) {\n        return false;\n    }\n\n    if (!this.center_) {\n        this.center_ = marker.getPosition();\n        this.calculateBounds_();\n    } else {\n        if (this.averageCenter_) {\n            var l = this.markers_.length + 1;\n            var lat = (this.center_.lat() * (l-1) + marker.getPosition().lat()) / l;\n            var lng = (this.center_.lng() * (l-1) + marker.getPosition().lng()) / l;\n            this.center_ = new google.maps.LatLng(lat, lng);\n            this.calculateBounds_();\n        }\n    }\n\n    marker.isAdded = true;\n    this.markers_.push(marker);\n\n    var len = this.markers_.length;\n    if (len < this.minClusterSize_ && marker.getMap() != this.map_) {\n        // Min cluster size not reached so show the marker.\n        marker.setMap(this.map_);\n    }\n\n    if (len == this.minClusterSize_) {\n        // Hide the markers that were showing.\n        for (var i = 0; i < len; i++) {\n            this.markers_[i].setMap(null);\n        }\n    }\n\n    if (len >= this.minClusterSize_) {\n        marker.setMap(null);\n    }\n\n    this.updateIcon();\n    return true;\n};\n\n\n/**\n * Returns the marker clusterer that the cluster is associated with.\n *\n * @return {MarkerClusterer} The associated marker clusterer.\n */\nCluster.prototype.getMarkerClusterer = function() {\n    return this.markerClusterer_;\n};\n\n\n/**\n * Returns the bounds of the cluster.\n *\n * @return {google.maps.LatLngBounds} the cluster bounds.\n */\nCluster.prototype.getBounds = function() {\n    var bounds = new google.maps.LatLngBounds(this.center_, this.center_);\n    var markers = this.getMarkers();\n    for (var i = 0, marker; marker = markers[i]; i++) {\n        bounds.extend(marker.getPosition());\n    }\n    return bounds;\n};\n\n\n/**\n * Removes the cluster\n */\nCluster.prototype.remove = function() {\n    this.clusterIcon_.remove();\n    this.markers_.length = 0;\n    delete this.markers_;\n};\n\n\n/**\n * Returns the center of the cluster.\n *\n * @return {number} The cluster center.\n */\nCluster.prototype.getSize = function() {\n    return this.markers_.length;\n};\n\n\n/**\n * Returns the center of the cluster.\n *\n * @return {Array.<google.maps.Marker>} The cluster center.\n */\nCluster.prototype.getMarkers = function() {\n    return this.markers_;\n};\n\n\n/**\n * Returns the center of the cluster.\n *\n * @return {google.maps.LatLng} The cluster center.\n */\nCluster.prototype.getCenter = function() {\n    return this.center_;\n};\n\n\n/**\n * Calculated the extended bounds of the cluster with the grid.\n *\n * @private\n */\nCluster.prototype.calculateBounds_ = function() {\n    var bounds = new google.maps.LatLngBounds(this.center_, this.center_);\n    this.bounds_ = this.markerClusterer_.getExtendedBounds(bounds);\n};\n\n\n/**\n * Determines if a marker lies in the clusters bounds.\n *\n * @param {google.maps.Marker} marker The marker to check.\n * @return {boolean} True if the marker lies in the bounds.\n */\nCluster.prototype.isMarkerInClusterBounds = function(marker) {\n    return this.bounds_.contains(marker.getPosition());\n};\n\n\n/**\n * Returns the map that the cluster is associated with.\n *\n * @return {google.maps.Map} The map.\n */\nCluster.prototype.getMap = function() {\n    return this.map_;\n};\n\n\n/**\n * Updates the cluster icon\n */\nCluster.prototype.updateIcon = function() {\n    var zoom = this.map_.getZoom();\n    var mz = this.markerClusterer_.getMaxZoom();\n\n    if (mz && zoom > mz) {\n        // The zoom is greater than our max zoom so show all the markers in cluster.\n        for (var i = 0, marker; marker = this.markers_[i]; i++) {\n            marker.setMap(this.map_);\n        }\n        return;\n    }\n\n    if (this.markers_.length < this.minClusterSize_) {\n        // Min cluster size not yet reached.\n        this.clusterIcon_.hide();\n        return;\n    }\n\n    var numStyles = this.markerClusterer_.getStyles().length;\n    var sums = this.markerClusterer_.getCalculator()(this.markers_, numStyles);\n    this.clusterIcon_.setCenter(this.center_);\n    this.clusterIcon_.setSums(sums);\n    this.clusterIcon_.show();\n};\n\n\n/**\n * A cluster icon\n *\n * @param {Cluster} cluster The cluster to be associated with.\n * @param {Object} styles An object that has style properties:\n *     'url': (string) The image url.\n *     'height': (number) The image height.\n *     'width': (number) The image width.\n *     'anchor': (Array) The anchor position of the label text.\n *     'textColor': (string) The text color.\n *     'textSize': (number) The text size.\n *     'backgroundPosition: (string) The background postition x, y.\n * @param {number=} opt_padding Optional padding to apply to the cluster icon.\n * @constructor\n * @extends google.maps.OverlayView\n * @ignore\n */\nfunction ClusterIcon(cluster, styles, opt_padding) {\n    cluster.getMarkerClusterer().extend(ClusterIcon, google.maps.OverlayView);\n\n    this.styles_ = styles;\n    this.padding_ = opt_padding || 0;\n    this.cluster_ = cluster;\n    this.center_ = null;\n    this.map_ = cluster.getMap();\n    this.div_ = null;\n    this.sums_ = null;\n    this.visible_ = false;\n\n    this.setMap(this.map_);\n}\n\n\n/**\n * Triggers the clusterclick event and zoom's if the option is set.\n *\n * @param {google.maps.MouseEvent} event The event to propagate\n */\nClusterIcon.prototype.triggerClusterClick = function(event) {\n    var markerClusterer = this.cluster_.getMarkerClusterer();\n\n    // Trigger the clusterclick event.\n    google.maps.event.trigger(markerClusterer, 'clusterclick', this.cluster_, event);\n\n    if (markerClusterer.isZoomOnClick()) {\n        // Zoom into the cluster.\n        this.map_.fitBounds(this.cluster_.getBounds());\n    }\n};\n\n\n/**\n * Adding the cluster icon to the dom.\n * @ignore\n */\nClusterIcon.prototype.onAdd = function() {\n    this.div_ = document.createElement('DIV');\n    if (this.visible_) {\n        var pos = this.getPosFromLatLng_(this.center_);\n        this.div_.style.cssText = this.createCss(pos);\n        this.div_.innerHTML = this.sums_.text;\n    }\n\n    var panes = this.getPanes();\n    panes.overlayMouseTarget.appendChild(this.div_);\n\n    var that = this;\n    var isDragging = false;\n    google.maps.event.addDomListener(this.div_, 'click', function(event) {\n        // Only perform click when not preceded by a drag\n        if (!isDragging) {\n            that.triggerClusterClick(event);\n        }\n    });\n    google.maps.event.addDomListener(this.div_, 'mousedown', function() {\n        isDragging = false;\n    });\n    google.maps.event.addDomListener(this.div_, 'mousemove', function() {\n        isDragging = true;\n    });\n};\n\n\n/**\n * Returns the position to place the div dending on the latlng.\n *\n * @param {google.maps.LatLng} latlng The position in latlng.\n * @return {google.maps.Point} The position in pixels.\n * @private\n */\nClusterIcon.prototype.getPosFromLatLng_ = function(latlng) {\n    var pos = this.getProjection().fromLatLngToDivPixel(latlng);\n\n    if (typeof this.iconAnchor_ === 'object' && this.iconAnchor_.length === 2) {\n        pos.x -= this.iconAnchor_[0];\n        pos.y -= this.iconAnchor_[1];\n    } else {\n        pos.x -= parseInt(this.width_ / 2, 10);\n        pos.y -= parseInt(this.height_ / 2, 10);\n    }\n    return pos;\n};\n\n\n/**\n * Draw the icon.\n * @ignore\n */\nClusterIcon.prototype.draw = function() {\n    if (this.visible_) {\n        var pos = this.getPosFromLatLng_(this.center_);\n        this.div_.style.top = pos.y + 'px';\n        this.div_.style.left = pos.x + 'px';\n    }\n};\n\n\n/**\n * Hide the icon.\n */\nClusterIcon.prototype.hide = function() {\n    if (this.div_) {\n        this.div_.style.display = 'none';\n    }\n    this.visible_ = false;\n};\n\n\n/**\n * Position and show the icon.\n */\nClusterIcon.prototype.show = function() {\n    if (this.div_) {\n        var pos = this.getPosFromLatLng_(this.center_);\n        this.div_.style.cssText = this.createCss(pos);\n        this.div_.style.display = '';\n    }\n    this.visible_ = true;\n};\n\n\n/**\n * Remove the icon from the map\n */\nClusterIcon.prototype.remove = function() {\n    this.setMap(null);\n};\n\n\n/**\n * Implementation of the onRemove interface.\n * @ignore\n */\nClusterIcon.prototype.onRemove = function() {\n    if (this.div_ && this.div_.parentNode) {\n        this.hide();\n        this.div_.parentNode.removeChild(this.div_);\n        this.div_ = null;\n    }\n};\n\n\n/**\n * Set the sums of the icon.\n *\n * @param {Object} sums The sums containing:\n *   'text': (string) The text to display in the icon.\n *   'index': (number) The style index of the icon.\n */\nClusterIcon.prototype.setSums = function(sums) {\n    this.sums_ = sums;\n    this.text_ = sums.text;\n    this.index_ = sums.index;\n    if (this.div_) {\n        this.div_.innerHTML = sums.text;\n    }\n\n    this.useStyle();\n};\n\n\n/**\n * Sets the icon to the the styles.\n */\nClusterIcon.prototype.useStyle = function() {\n    var index = Math.max(0, this.sums_.index - 1);\n    index = Math.min(this.styles_.length - 1, index);\n    var style = this.styles_[index];\n    this.url_ = style['url'];\n    this.height_ = style['height'];\n    this.width_ = style['width'];\n    this.textColor_ = style['textColor'];\n    this.anchor_ = style['anchor'];\n    this.textSize_ = style['textSize'];\n    this.backgroundPosition_ = style['backgroundPosition'];\n    this.iconAnchor_ = style['iconAnchor'];\n};\n\n\n/**\n * Sets the center of the icon.\n *\n * @param {google.maps.LatLng} center The latlng to set as the center.\n */\nClusterIcon.prototype.setCenter = function(center) {\n    this.center_ = center;\n};\n\n\n/**\n * Create the css text based on the position of the icon.\n *\n * @param {google.maps.Point} pos The position.\n * @return {string} The css style text.\n */\nClusterIcon.prototype.createCss = function(pos) {\n    var style = [];\n    style.push('background-image:url(' + this.url_ + ');');\n    var backgroundPosition = this.backgroundPosition_ ? this.backgroundPosition_ : '0 0';\n    style.push('background-position:' + backgroundPosition + ';');\n\n    if (typeof this.anchor_ === 'object') {\n        if (typeof this.anchor_[0] === 'number' && this.anchor_[0] > 0 &&\n            this.anchor_[0] < this.height_) {\n            style.push('height:' + (this.height_ - this.anchor_[0]) +\n                'px; padding-top:' + this.anchor_[0] + 'px;');\n        } else if (typeof this.anchor_[0] === 'number' && this.anchor_[0] < 0 &&\n            -this.anchor_[0] < this.height_) {\n            style.push('height:' + this.height_ + 'px; line-height:' + (this.height_ + this.anchor_[0]) +\n                'px;');\n        } else {\n            style.push('height:' + this.height_ + 'px; line-height:' + this.height_ +\n                'px;');\n        }\n        if (typeof this.anchor_[1] === 'number' && this.anchor_[1] > 0 &&\n            this.anchor_[1] < this.width_) {\n            style.push('width:' + (this.width_ - this.anchor_[1]) +\n                'px; padding-left:' + this.anchor_[1] + 'px;');\n        } else {\n            style.push('width:' + this.width_ + 'px; text-align:center;');\n        }\n    } else {\n        style.push('height:' + this.height_ + 'px; line-height:' +\n            this.height_ + 'px; width:' + this.width_ + 'px; text-align:center;');\n    }\n\n    var txtColor = this.textColor_ ? this.textColor_ : 'black';\n    var txtSize = this.textSize_ ? this.textSize_ : 11;\n\n    style.push('cursor:pointer; top:' + pos.y + 'px; left:' +\n        pos.x + 'px; color:' + txtColor + '; position:absolute; font-size:' +\n        txtSize + 'px; font-family:Arial,sans-serif; font-weight:bold');\n    return style.join('');\n};\n\n\n// Export Symbols for Closure\n// If you are not going to compile with closure then you can remove the\n// code below.\nwindow['MarkerClusterer'] = MarkerClusterer;\nMarkerClusterer.prototype['addMarker'] = MarkerClusterer.prototype.addMarker;\nMarkerClusterer.prototype['addMarkers'] = MarkerClusterer.prototype.addMarkers;\nMarkerClusterer.prototype['clearMarkers'] =\n    MarkerClusterer.prototype.clearMarkers;\nMarkerClusterer.prototype['fitMapToMarkers'] =\n    MarkerClusterer.prototype.fitMapToMarkers;\nMarkerClusterer.prototype['getCalculator'] =\n    MarkerClusterer.prototype.getCalculator;\nMarkerClusterer.prototype['getGridSize'] =\n    MarkerClusterer.prototype.getGridSize;\nMarkerClusterer.prototype['getExtendedBounds'] =\n    MarkerClusterer.prototype.getExtendedBounds;\nMarkerClusterer.prototype['getMap'] = MarkerClusterer.prototype.getMap;\nMarkerClusterer.prototype['getMarkers'] = MarkerClusterer.prototype.getMarkers;\nMarkerClusterer.prototype['getMaxZoom'] = MarkerClusterer.prototype.getMaxZoom;\nMarkerClusterer.prototype['getStyles'] = MarkerClusterer.prototype.getStyles;\nMarkerClusterer.prototype['getTotalClusters'] =\n    MarkerClusterer.prototype.getTotalClusters;\nMarkerClusterer.prototype['getTotalMarkers'] =\n    MarkerClusterer.prototype.getTotalMarkers;\nMarkerClusterer.prototype['redraw'] = MarkerClusterer.prototype.redraw;\nMarkerClusterer.prototype['removeMarker'] =\n    MarkerClusterer.prototype.removeMarker;\nMarkerClusterer.prototype['removeMarkers'] =\n    MarkerClusterer.prototype.removeMarkers;\nMarkerClusterer.prototype['resetViewport'] =\n    MarkerClusterer.prototype.resetViewport;\nMarkerClusterer.prototype['repaint'] =\n    MarkerClusterer.prototype.repaint;\nMarkerClusterer.prototype['setCalculator'] =\n    MarkerClusterer.prototype.setCalculator;\nMarkerClusterer.prototype['setGridSize'] =\n    MarkerClusterer.prototype.setGridSize;\nMarkerClusterer.prototype['setMaxZoom'] =\n    MarkerClusterer.prototype.setMaxZoom;\nMarkerClusterer.prototype['onAdd'] = MarkerClusterer.prototype.onAdd;\nMarkerClusterer.prototype['draw'] = MarkerClusterer.prototype.draw;\n\nCluster.prototype['getCenter'] = Cluster.prototype.getCenter;\nCluster.prototype['getSize'] = Cluster.prototype.getSize;\nCluster.prototype['getMarkers'] = Cluster.prototype.getMarkers;\n\nClusterIcon.prototype['onAdd'] = ClusterIcon.prototype.onAdd;\nClusterIcon.prototype['draw'] = ClusterIcon.prototype.draw;\nClusterIcon.prototype['onRemove'] = ClusterIcon.prototype.onRemove;"]}